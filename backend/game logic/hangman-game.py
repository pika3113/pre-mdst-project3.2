# -*- coding: utf-8 -*-
"""PROJECT 3 ME4T CHAN WEE HOW GREGORY (GROUP PROJECT - Hangman)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X3zOuD0wNX8U2vQbPgkqn8VVgyIV5in6
"""

#Import english dictionary
from nltk.corpus import words

# Download WordNet (only needed once)
import nltk

# # Get synonyms and definitions
# synsets = wordnet.synsets("example")
# for synset in synsets:
#     print(f"Definition: {synset.definition()}")
#     print(f"Synonyms: {synset.lemma_names()}")


# "random" function for word
import random

# "sys" to end game
import sys

#Get all words and group into 1 giant list
allWords = list(words.words())

#Defining the different characteristics of words in each difficulty
easy = [word for word in allWords if 4 <= len(word) <= 5] # $3
medium = [word for word in allWords if 6 <= len(word) <= 7] # $5
hard = [word for word in allWords if len(word) == 8 ] # $7
extreme = [word for word in allWords if len(word) >= 9 ] # $10

# Command for display of current progress in hangman
def replace_char_with_list(display, indices, guess):
    display_list = display.replace (" ", "")
    display_list = list(display_list)
    for index in indices:
        display_list[index] = guess
    display_list = " ".join(display_list)
    return ''.join(display_list)

# Global variable across all games
money_Pool = 0

#Check number of possible choices in each difficulty
print (f"Number of Easy words: {len(easy)}")
print (f"Number of Medium words: {len(medium)}")
print (f"Number of Hard words: {len(hard)}")
print (f"Number of Extreme words: {len(extreme)}")

"""You can check and reset the `money_Pool` value using the following code cells:"""

import random
import sys
from nltk.corpus import brown # Assuming you want to use the words corpus

# Get all words and group into 1 giant list
allWords = list(brown.words())

#Defining the different characteristics of words in each difficulty
easy = [word for word in allWords if 4 <= len(word) <= 5] # $3
medium = [word for word in allWords if 6 <= len(word) <= 7] # $5
hard = [word for word in allWords if len(word) == 8 ] # $7
extreme = [word for word in allWords if len(word) >= 9 ] # $10

# Defining the difficulty dictionary using the word lists
difficulty = {"easy": easy, "medium": medium, "hard": hard, "extreme": extreme}

# Command for display of current progress in hangman
def replace_char_with_list(display, indices, guess):
    display_list = display.replace (" ", "")
    display_list = list(display_list)
    for index in indices:
        display_list[index] = guess
    display_list = " ".join(display_list)
    return ''.join(display_list)

# Global variable across all games
money_Pool = 0

# Difficulty selector
def setDifficulty ():
  while True:
    print(f"Choose your difficulty: \nEasy - $3 \nMedium - $5 \nHard - $7 \nExtreme - $10")
    mode = input()
    mode = mode.lower()
    if mode == "easy" or mode == "medium" or mode == "hard" or mode == "extreme":
      return mode
    else:
      print ("Invalid input, please choose: Easy, Medium, Hard, Extreme")
      continue

# Money decided
def setMoney (difficulty):
  if difficulty == "easy":
    amount = 3
  elif difficulty == "medium":
    amount = 5
  elif difficulty == "hard":
    amount = 7
  elif difficulty == "extreme":
    amount = 10
  else:
      amount = 0 # Default or handle invalid difficulty

  return amount

def play_hangman(chosen_difficulty, earned_money):
    # Choose word choice
    global difficulty # Ensure the difficulty dictionary is accessible
    chosenWordList = difficulty[chosen_difficulty]
    chosenWord = random.choice(chosenWordList)
    chosenWord = chosenWord.upper()
    display = len(chosenWord) * "_ " # Initialize display here
    print (display)

    #Define the number of guesses
    guesses = 6
    used_letters = set() # Initialize a set to store used letters

    global money_Pool # Declare money_Pool as global to modify it

    while True:
        if guesses > 0:
            #print (f"The word has {len(chosenWord)} letters")
            print (f"Used letters: {' '.join(sorted(list(used_letters)))}") # Display used letters
            guess = input("Guess a letter or type '!' to guess the word: ") # Modified prompt
            guess = guess.upper()

            # Handle guessing the whole word
            if guess == "!":
                while True:
                    print (f"Would you like to guess the word? Y/N")
                    answer = input()
                    answer = answer.upper() # Convert answer to uppercase for consistent checking
                    if answer == "Y":
                      guessWord = input("Guess the word: ")
                      guessWord = guessWord.upper()
                      if guessWord == chosenWord:
                        print ("You win!")
                        money_Pool += earned_money # Correctly add earned_money
                        print (f"Total Money: ${money_Pool}")
                        return "win" # Return win status
                      else:
                        print("That's not the word. You lose.")
                        return "lose" # Return lose status
                    elif answer == "N":
                      break # Go back to guessing letters
                    else:
                      print ("Invalid input")
                      continue
                continue # Continue the outer game loop after deciding not to guess the word


            # Handle guessing a single letter
            if guess.isalpha() and len(guess) == 1:
                if guess in used_letters:
                    print(f"You already guessed the letter '{guess}'.")
                    print (f"Progress: {display} ")
                    continue # Skip the rest of the loop and ask for another guess

                used_letters.add(guess) # Add the guessed letter to the set

                presentLetter = set(chosenWord) # Move inside to be sure its for the current word
                if guess in presentLetter:
                    print (f"Correct!, you have {guesses} guesses remaining")
                    print (f"Progress: {display} ")

                    # Obtain the index of the guessed letter
                    letterPosition = [i for i, char in enumerate(chosenWord) if char == guess]

                    # For user friendly presentation
                    letterPositionPre = letterPosition.copy()
                    letterPositionPre = [x + 1 for x in letterPositionPre]
                    print (f"Positions: {letterPositionPre}")

                    display = replace_char_with_list(display, letterPosition, guess) # Use and update display
                    print (f"Progress: {display} ") # Print display

                    # Check if the word is fully guessed
                    if "_ " not in display:
                        print("Congratulations! You guessed the word!")
                        money_Pool += earned_money # Correctly add earned_money
                        print (f"Total Money: ${money_Pool}")
                        return "win" # Return win status

                else: # Check for answer (P2)
                    print (f"Wrong!, you have {guesses - 1} guesses remaining")
                    print (f"Progress: {display} ")
                    guesses -= 1

            else: # Handle invalid input for single letter guess
                print ("Invalid input, please enter a single letter or type '!' to guess the word.")

        else:
            print (f"Nice try, better luck next time. The word was {chosenWord} ")
            return "lose" # Return lose status


# Outer loop to play multiple games
while True:
    # Ensure setDifficulty and setMoney are defined in accessible cells
    chosen_difficulty = setDifficulty() # Call setDifficulty to get the mode
    earned_money = setMoney(chosen_difficulty) # Call setMoney to get the money
    game_result = play_hangman(chosen_difficulty, earned_money) # Play a game

    play_again = input("Do you want to play again? (Y/N): ").upper()
    if play_again != 'Y':
        break
    # The following elif was causing an IndentationError and has been removed.
    elif play_again == "N":
      sys.exit() # Use sys.exit() to exit the game
    else:
        print ("Invalid input. Please enter Y/N.")
        continue

print(f"Final Money Pool: ${money_Pool}")
money_Pool = 0 # Reset to 0 for when the game is resetted
print(f"Money Pool cleared. Current Money Pool: ${money_Pool}")

# # Difficulty selector
# def difficulty ():
#   while True:
#     print(f"Choose your difficulty: \nEasy - $3 \nMedium - $5 \nHard - $7 \nExtreme - $10") # Added $7 for Hard
#     mode = input()
#     mode = mode.lower()
#     if mode == "easy" or mode == "medium" or mode == "hard" or mode == "extreme":
#       return mode # Return the chosen mode
#     else:
#       print ("Invalid input, please choose: Easy, Medium, Hard, Extreme")
#       continue


# # Money decided
# def setMoney (difficulty): # Accept difficulty as an argument
#   if difficulty == "easy":
#     amount = 3
#   elif difficulty == "medium":
#     amount = 5
#   elif difficulty == "hard":
#     amount = 7
#   elif difficulty == "extreme": # Corrected elif condition
#     amount = 10
#   else:
#       amount = 0 # Default or handle invalid difficulty

#   return amount

# # Example of how to use the functions:
# chosen_difficulty = difficulty()
# presentation_difficulty = chosen_difficulty.upper()
# earned_money = setMoney(chosen_difficulty)

# # Setting difficulty to be scriptable for the bottom command
# difficulty = {"easy": easy, "medium": medium, "hard": hard, "extreme": extreme}

# print(f"You chose difficulty: {presentation_difficulty}")
# print(f"You can earn ${earned_money} per level for this difficulty.")

# # Display the current money in the pool
# print(f"Current Money Pool: ${money_Pool}")

# # Clear the money pool
# money_Pool = 0
# print(f"Money Pool cleared. Current Money Pool: ${money_Pool}")

# # # Everything combined with the function
# # Use the chosen_difficulty from the previous cell to select the list of words
# chosenWordList = difficulty[chosen_difficulty]
# chosenWord = random.choice(chosenWordList)
# #print (chosenWord)
# chosenWord = chosenWord.upper()
# display = len(chosenWord) * "_ " # Initialize display here
# print (display)
# #Define the number of guesses
# guesses = 6


# while True:
#   if guesses > 0 and guessWord == chosenWord:
#       print (f"Play again? Y/N") #Ask if want to play again
#       answer = input()
#       answer = answer.upper()
#       if answer == "Y": #Repeated command below to select word
#         chosenWordList = difficulty[chosen_difficulty]
#         chosenWord = random.choice(chosenWordList)
#         print (chosenWord)
#         chosenWord = chosenWord.upper()
#         display = len(chosenWord) * "_ " # Initialize display here
#         print (display)

#       elif answer == "N":
#         print (f"Final Money Pool: ${money_Pool}")
#         money_Pool = 0 # Reset money pool
#         print(f"Money Pool cleared. Current Money Pool: ${money_Pool}")
#         sys.exit() # Use sys.exit() to exit
#         break
#       else:
#         print ("Invalid input")
#         continue

#   elif guesses > 0:
#       print (f"The word has {len(chosenWord)} letters")
#       guess = input("Guess a letter: ")
#       guess = guess.upper()

#       # Checking if letter is accurate
#       presentLetter = set(chosenWord)
#       # print (presentLetter)
#       # print (guess)

#       char = set(guess)
#       # print (char)

#       commonLetter = set(presentLetter) & set(char)
#       # print (commonLetter)

#   else:
#     print (f"Nice try, better luck next time. The word was {chosenWord} ")
#     # display = len(chosenWord) * "_ " # This line was causing the display to reset on loss
#     # print (display)
#     break

# # Validation for just 1 letter (P1)
#   if guess.isalpha():
#     if len(guess) != 1:
#       print ("Invalid input, please enter a single letter")
#       continue

#     else:
#     # Check for answer (P1)
#       if guess in presentLetter:
#         print (f"Correct!, you have {guesses} guesses remaining")

#         # Obtain the index of the guessed letter
#         letterPosition = [i for i, char in enumerate(chosenWord) if char == guess]
#         # print (letterPosition)

#         # For user friendly presentation
#         letterPositionPre = letterPosition.copy()
#         # print (letterPositionPre)
#         letterPositionPre = [x + 1 for x in letterPositionPre]
#         print (letterPositionPre)

#         # Initialize display with underscores
#         # display = len(chosenWord) * "_ " # This initialization should be before the loop

#         display = replace_char_with_list(display, letterPosition, guess) # Use and update display
#         # print (result)
#         print (f"Progress: {display} ") # Print display

#         # Check if the word is fully guessed
#         if "_ " not in display:
#             print("Congratulations! You guessed the word!")
#             money_Pool += earned_money
#             print (money_Pool)
#             print (f"Play again? Y/N") #Ask if want to play again
#             answer = input()
#             answer = answer.upper()
#             if answer == "Y": #Repeated command below to select word
#               chosenWordList = difficulty[chosen_difficulty]
#               chosenWord = random.choice(chosenWordList)
#               print (chosenWord)
#               chosenWord = chosenWord.upper()
#               display = len(chosenWord) * "_ " # Initialize display here
#               print (display)
#             break
#         continue

#       else: # Check for answer (P2)
#         print (f"Wrong!, you have {guesses - 1} guesses remaining")
#         guesses -= 1
#         continue

#   elif guess == "!":
#     while True:
#         print (f"Would you like to guess the word? Y/N")
#         answer = input()
#         answer = answer.upper() # Convert answer to uppercase for consistent checking
#         if answer == "Y":
#           guessWord = input("Guess the word: ")
#           guessWord = guessWord.upper()
#           if guessWord == chosenWord:
#             print ("You win!")
#             money_Pool += earned_money
#             print (f"You have ${money_Pool} in total.")
#             break

#           else:
#             print("That's not the word. You lose.")
#             print (f"Play again? Y/N") #Ask if want to play again
#             answer = input()
#             answer = answer.upper()
#             if answer == "Y": #Repeated command below to select word
#               chosenWordList = difficulty[chosen_difficulty]
#               chosenWord = random.choice(chosenWordList)
#               print (chosenWord)
#               chosenWord = chosenWord.upper()
#               display = len(chosenWord) * "_ " # Initialize display here
#               print (display)

#             elif answer == "N":
#               print (f"Final Money Pool: ${money_Pool}")
#               money_Pool = 0 # Reset money pool
#               print(f"Money Pool cleared. Current Money Pool: ${money_Pool}")
#               sys.exit() # Use sys.exit() to exit
#               break

#         elif answer == "N":
#           break # Go back to guessing letters
#         else:
#           print ("Invalid input")
#           continue
#   else: # Validation for letter (P2)
#     print ("Invalid input, please enter a letter")
#     continue


# print(f"Final Money Pool: ${money_Pool}")